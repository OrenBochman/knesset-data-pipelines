{{ if .Values.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{.Values.name | default "grafana" | quote}}
spec:
  selector:
    app: {{.Values.name | default "grafana" | quote}}
  ports:
  - port: 3000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{.Values.name | default "grafana" | quote}}
spec:
  replicas: 1
  strategy: {type: "Recreate"}
  template:
    metadata:
      labels:
        app: {{.Values.name | default "grafana" | quote}}
    spec:
      containers:
      - image: {{.Values.image | default "grafana/grafana" | quote}}
        env:
        {{ if .Values.global.rootUrl }}
        - name: GF_SERVER_ROOT_URL
          value: "{{.Values.global.rootUrl}}/grafana"
        {{ else }}
        - name: GF_SERVER_ROOT_URL
          value: "http://localhost:8001/api/v1/namespaces/default/services/grafana/proxy/"
        {{ end }}
        {{ if .Values.anonymousEnabled }}
        - {name: GF_AUTH_ANONYMOUS_ENABLED, value: "true"}
        - {name: GF_AUTH_ANONYMOUS_ORG_NAME, value: main}
        - {name: GF_AUTH_ANONYMOUS_ORG_ROLE, value: anonymous}
        {{ end }}
        - {name: GF_DATABASE_TYPE, value: "postgres"}
        - {name: GF_DATABASE_HOST, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_HOST_PORT"}}}
        - {name: GF_DATABASE_NAME, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_NAME"}}}
        - {name: GF_DATABASE_USER, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_USER"}}}
        - {name: GF_DATABASE_PASSWORD, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_PASSWORD"}}}
        name: {{.Values.name | default "grafana" | quote}}
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: {{.Values.cpuRequests | default "0.05"}}
            memory: {{.Values.memoryRequests | default "50Mi"}}
      {{ if not .Values.global.skipInitContainers }}
      initContainers:
      - name: create-db
        image: sameersbn/postgresql:9.6-2
        command: ['bash', '-c', 'psql -h ${DB_HOST} -U ${DB_USER} -p ${DB_PORT} -c "CREATE DATABASE ${DB_NAME}" || true']
        env:
        - {name: DB_HOST, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_HOST"}}}
        - {name: DB_NAME, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_NAME"}}}
        - {name: DB_USER, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_USER"}}}
        - {name: DB_PORT, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_PORT"}}}
        - {name: PGPASSWORD, valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "GRAFANA_DATABASE_PASSWORD"}}}
      {{ end }}
{{ end }}