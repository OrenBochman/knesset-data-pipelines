{{ if .Values.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{.Values.name | default "metabase" | quote}}
spec:
  selector:
    app: {{.Values.name | default "metabase" | quote}}
  ports:
  - port: 3000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{.Values.name | default "metabase" | quote}}
spec:
  replicas: 1
  strategy:
    # Metabase is very CPU and memory intensive - so we use recreate strategy to prevent overloading the cluster
    type: Recreate
  template:
    metadata:
      labels:
        app: {{.Values.name | default "metabase" | quote}}
    spec:
      containers:
      - env:
        - {name: "MB_DB_TYPE", value: "postgres"}
        - {name: "MB_DB_DBNAME", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_NAME"}}}
        - {name: "MB_DB_PORT", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_PORT"}}}
        - {name: "MB_DB_USER", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_USER"}}}
        - {name: "MB_DB_PASS", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_PASS"}}}
        - {name: "MB_DB_HOST", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_HOST"}}}
        image: {{.Values.image | default "metabase/metabase" | quote}}
        name: {{.Values.name | default "metabase" | quote}}
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: {{.Values.cpuRequests | default "0.1"}}
            memory: {{.Values.memoryRequests | default "800Mi" | quote}}
#        readinessProbe:
#          initialDelaySeconds: 10
#          periodSeconds: 10
#          timeoutSeconds: 5
#          httpGet:
#            path: /
#            port: 3000
      {{ if not .Values.global.skipInitContainers }}
      initContainers:
      - name: metabase-create-db
        image: sameersbn/postgresql:9.6-2
        command: ['bash', '-c', 'psql -h ${MB_DB_HOST} -U ${MB_DB_USER} -p 5432 -c "CREATE DATABASE ${MB_DB_DBNAME}" || true']
        env:
        - {name: "MB_DB_DBNAME", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_NAME"}}}
        - {name: "MB_DB_PORT", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_PORT"}}}
        - {name: "MB_DB_USER", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_USER"}}}
        - {name: "PGPASSWORD", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_PASS"}}}
        - {name: "MB_DB_HOST", valueFrom: {secretKeyRef: {name: {{.Values.global.secretEnvVars | quote}}, key: "METABASE_DB_HOST"}}}
      {{ end }}
{{ end }}
